#version 330 core
out vec4 fragColor;

struct Material {
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct WorldLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct LampLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float constant;
    float linear;
    float quadratic;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float cutOff;
    float outerCutOff;  
};

in vec3 fragPos;
in vec3 ourNormal;
in vec2 ourTexCoord;
in vec4 vertexColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;
uniform WorldLight worldLight;
uniform LampLight lampLight[1];
uniform SpotLight spotLight;
uniform Material material;

vec3 CalcWorldLight(WorldLight light, vec3 ourNormal, vec3 viewDir);
vec3 CalcLampLight(LampLight light, vec3 ourNormal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 ourNormal, vec3 fragPos, vec3 viewDir);

void main(){    

    vec3 norm = normalize(ourNormal);
    vec3 viewDir = normalize(viewPos - fragPos);

    vec3 result = vec3(0);
    result += CalcWorldLight(worldLight, norm, viewDir);

    // Can be changed depending on how many lamps are in the scene
    for(int i=0; i < 1; i++){
        result += CalcLampLight(lampLight[i], norm, fragPos, viewDir);
    }

    result += CalcSpotLight(spotLight, norm, fragPos, viewDir);    
    
    fragColor = vec4(result, 1.0);
}

vec3 CalcWorldLight(WorldLight light, vec3 norm, vec3 viewDir){
    vec3 lightDir = normalize(-light.direction);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 ambient = light.ambient * texture(first_texture, ourTexCoord).rgb;
    vec3 diffuse = light.diffuse * texture(first_texture, ourTexCoord).rgb;
    vec3 specular = light.specular * (spec * material.specular);
    
    return (ambient + diffuse + specular);
}

vec3 CalcLampLight(LampLight light, vec3 norm, vec3 fragPos, vec3 viewDir){
    vec3 ambient = light.ambient * texture(first_texture, ourTexCoord).rgb;
    vec3 lightDir = normalize(light.position - fragPos);  
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * (diff * material.diffuse) * texture(first_texture, ourTexCoord).rgb;
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);  
    vec3 specular =  light.specular * (spec * material.specular);
    
    // Fade the light out the further it travels
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return (ambient + diffuse + specular);
}

vec3 CalcSpotLight(SpotLight light, vec3 norm, vec3 fragPos, vec3 viewDir){
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 ambient = light.ambient * texture(first_texture, ourTexCoord).rgb;
    vec3 diffuse = light.diffuse * (diff * material.diffuse) * texture(first_texture, ourTexCoord).rgb;
    vec3 specular = light.specular * (spec * material.specular);

    // Gives the spotlight effect
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    ambient *= intensity;
    diffuse *= intensity;
    specular *= intensity;

    return (ambient + diffuse + specular);
}